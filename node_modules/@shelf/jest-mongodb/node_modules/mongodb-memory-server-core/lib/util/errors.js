"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnknownArchitecture = exports.UnknownPlatform = exports.UnknownLockfileStatus = exports.StateError = void 0;
const utils_1 = require("./utils");
class StateError extends Error {
    constructor(wantedStates, gotState) {
        super(`Incorrect State for operation: "${gotState}", allowed States: "[${wantedStates.join(',')}]"\n` +
            'This may be because of using a v6.x way of calling functions, look at the following guide if anything applies:\n' +
            'https://nodkz.github.io/mongodb-memory-server/docs/guides/migrate7#no-function-other-than-start-create-ensureinstance-will-be-starting-anything');
        this.wantedStates = wantedStates;
        this.gotState = gotState;
    }
}
exports.StateError = StateError;
class UnknownLockfileStatus extends Error {
    constructor(status) {
        super(`Unknown LockFile Status: "${status}"`);
        this.status = status;
    }
}
exports.UnknownLockfileStatus = UnknownLockfileStatus;
class UnknownPlatform extends Error {
    constructor(platform) {
        super(`Unknown Platform: "${platform}"`);
        this.platform = platform;
    }
}
exports.UnknownPlatform = UnknownPlatform;
class UnknownArchitecture extends Error {
    constructor(arch, platform) {
        super();
        this.arch = arch;
        this.platform = platform;
        if (!utils_1.isNullOrUndefined(platform)) {
            this.message = `Unsupported Architecture-Platform combination: arch: "${arch}", platform: "${platform}"`;
        }
        else {
            this.message = `Unsupported Architecture: "${arch}"`;
        }
    }
}
exports.UnknownArchitecture = UnknownArchitecture;
//# sourceMappingURL=errors.js.map